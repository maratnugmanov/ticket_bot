from __future__ import annotations
import enum


class RoleName(enum.StrEnum):
    ADMIN = enum.auto()
    MANAGER = enum.auto()
    ENGINEER = enum.auto()
    GUEST = enum.auto()


class DeviceTypeName(enum.StrEnum):
    IP = enum.auto()
    TVE = enum.auto()
    ROUTER = enum.auto()


class CallbackData(enum.StrEnum):
    @staticmethod
    def _generate_next_value_(name, start, count, last_values):
        return "cb_" + name.lower()

    IP = enum.auto()
    TVE = enum.auto()
    ROUTER = enum.auto()

    INSTALL_DEVICE_BTN = enum.auto()
    REMOVE_DEVICE_BTN = enum.auto()
    EDIT_DEVICE_SN_BTN = enum.auto()

    ENABLE_HIRING = enum.auto()
    DISABLE_HIRING = enum.auto()
    ENTER_TICKET_NUMBER = enum.auto()
    EDIT_TICKET_NUMBER = enum.auto()
    ENTER_CONTRACT_NUMBER = enum.auto()
    EDIT_CONTRACT_NUMBER = enum.auto()

    TICKETS_HISTORY_BTN = enum.auto()
    WRITEOFF_DEVICES_BTN = enum.auto()
    FORM_REPORT_BTN = enum.auto()
    DISABLE_HIRING_BTN = enum.auto()
    ENABLE_HIRING_BTN = enum.auto()

    DEVICE_0 = enum.auto()
    DEVICE_1 = enum.auto()
    DEVICE_2 = enum.auto()
    DEVICE_3 = enum.auto()
    DEVICE_4 = enum.auto()
    DEVICE_5 = enum.auto()

    ADD_DEVICE_BTN = enum.auto()
    CLOSE_TICKET_BTN = enum.auto()
    QUIT_WITHOUT_SAVING_BTN = enum.auto()


class String(enum.StrEnum):
    # RoleName
    ADMIN = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    MANAGER = "–†–ì–ö–°"
    ENGINEER = "–°–ò"
    GUEST = "–ì–æ—Å—Ç—å"
    # DeviceTypeName
    IP = "IP"
    TVE = "TVE"
    ROUTER = "–†–æ—É—Ç–µ—Ä"

    INSTALL_DEVICE_BTN = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    REMOVE_DEVICE_BTN = "‚Ü™Ô∏è –ó–∞–±—Ä–∞—Ç—å"
    EDIT_DEVICE_SN_BTN = "–í–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä?"

    CLOSE_TICKET_BTN = "‚öô –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"
    TICKETS_HISTORY_BTN = "üóì –ò—Å—Ç–æ—Ä–∏—è"
    WRITEOFF_DEVICES_BTN = "‚ò† –ë—Ä–∞–∫"
    FORM_REPORT_BTN = "üñ® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
    ENABLE_HIRING_BTN = "üôã‚Äç‚ôÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–π–º"
    DISABLE_HIRING_BTN = "üôÖ‚Äç‚ôÄÔ∏è –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–π–º"
    ENTER_TICKET_NUMBER = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
    INCORRECT_TICKET_NUMBER = "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    GOT_DATA_NOT_TICKET_NUMBER = "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É, –∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
    EDIT_TICKET_NUMBER = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
    ENTER_NEW_TICKET_NUMBER = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
    ENTER_CONTRACT_NUMBER = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
    INCORRECT_CONTRACT_NUMBER = (
        "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    )
    GOT_DATA_NOT_CONTRACT_NUMBER = (
        "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É, –∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
    )
    EDIT_CONTRACT_NUMBER = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
    ENTER_NEW_CONTRACT_NUMBER = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"

    PICK_DEVICE_TYPE = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    FROM_OPTIONS_BELOW = "–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
    DEVICE_TYPE_WAS_NOT_PICKED = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    ENTER_SERIAL_NUMBER = "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä"
    INCORRECT_SERIAL_NUM = "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    GOT_DATA_NOT_SERIAL_NUMBER = (
        "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É, –∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    )
    PICK_INSTALL_OR_RETURN = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–ª–∏ –∑–∞–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    # SERIAL_NUMBER_RECOGNIZED = (
    #     "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø–æ–∑–Ω–∞–Ω: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –¥–æ–º–∞—à–Ω–µ–≥–æ —Å–∫–ª–∞–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    # )
    DEVICE_ACTION_WAS_NOT_PICKED = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"
    TICKET_ACTION_WAS_NOT_PICKED = "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–æ–π"
    GOT_UNEXPECTED_DATA = "–í–∞—à –≤—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
    PICK_TICKET_ACTION = "–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏/–¥–æ–≥–æ–≤–æ—Ä–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    TICKET_NUMBER_BTN = "–ó–∞—è–≤–∫–∞ ‚Ññ"
    CONTRACT_NUMBER_BTN = "–î–æ–≥–æ–≤–æ—Ä ‚Ññ"
    S_N = "—Å/–Ω"
    ADD_DEVICE_BTN = "–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
    QUIT_WITHOUT_SAVING_BTN = "–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    PICK_A_FUNCTION = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é"
    NO_FUNCTIONS_ARE_AVAILABLE = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–∫–∏–º-–ª–∏–±–æ —Ñ—É–Ω–∫—Ü–∏—è–º"
    HIRING_ENABLED_TIP = (
        "–°–æ–∏—Å–∫–∞—Ç–µ–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–µ–≥–æ –¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞."
    )
    HIRING_ENABLED = f"–ù–∞–π–º –æ—Ç–∫—Ä—ã—Ç. {HIRING_ENABLED_TIP}"
    HIRING_ALREADY_ENABLED = f"–ù–∞–π–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç. {HIRING_ENABLED_TIP}"
    HIRING_DISABLED_TIP = "–ï—Å–ª–∏ –Ω–∞–π–º –∑–∞–∫—Ä—ã—Ç —É –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —Ç–æ –≤—Å–µ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    HIRING_DISABLED = f"–ù–∞–π–º –∑–∞–∫—Ä—ã—Ç. {HIRING_DISABLED_TIP}"
    HIRING_ALREADY_DISABLED = f"–ù–∞–π–º —É–∂–µ –∑–∞–∫—Ä—ã—Ç. {HIRING_DISABLED_TIP}"
    # MESSAGE_HAS_EXPIRED = "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ"
    # YOU_HAVE_PICKED = "–í—ã –≤—ã–±—Ä–∞–ª–∏"


class Action(enum.StrEnum):
    @staticmethod
    def _generate_next_value_(name, start, count, last_values):
        return "ac_" + name.lower()

    ENTER_TICKET_NUMBER = enum.auto()
    ENTER_CONTRACT_NUMBER = enum.auto()
    PICK_DEVICE_TYPE = enum.auto()
    ENTER_SERIAL_NUMBER = enum.auto()
    PICK_INSTALL_OR_RETURN = enum.auto()
    TICKET_MENU = enum.auto()
    DEVICE_MENU = enum.auto()
    # ENABLE_HIRING = enum.auto()
    # DISABLE_HIRING = enum.auto()
    # INTRODUCTION_MAINMENU_BUTTONS = enum.auto()
    # TICKETS_HISTORY_MENU_BUTTONS = enum.auto()
    # WRITEOFF_DEVICES_LIST = enum.auto()
    # FORM_REPORT = enum.auto()
    # INITIAL_TICKET_NUMBER_INPUT = enum.auto()
    # INITIAL_DEVICE_TYPE_BUTTONS = enum.auto()
    # INITIAL_SERIAL_NUMBER_INPUT = enum.auto()
    # INITIAL_INSTALL_OR_RETURN_BUTTONS = enum.auto()
    # DEVICE_REMOVE_DEVICE_BUTTONS = enum.auto()
    # NEXT_DEVICE_TYPE_BUTTONS = enum.auto()
    # NEXT_SERIAL_NUMBER_INPUT = enum.auto()
    # NEXT_INSTALL_OR_RETURN_BUTTONS = enum.auto()
    # CLOSE_TICKET_CONFIRM_BUTTONS = enum.auto()
    # QUIT_WITHOUT_SAVING_BUTTONS = enum.auto()


class Script(enum.StrEnum):
    @staticmethod
    def _generate_next_value_(name, start, count, last_values):
        return "sc_" + name.lower()

    INITIAL_DATA = enum.auto()
    FROM_HISTORY = enum.auto()
    FROM_WRITEOFF = enum.auto()
